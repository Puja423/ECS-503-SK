// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

namespace Assignments_2.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20191113230757_test_5")]
    partial class test_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment2.Models.PostVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostVideo");
                });

            modelBuilder.Entity("WebApplication1.Models.Comments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Commentsid")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("PostetbypersonId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Commentsid");

                    b.HasIndex("PostId");

                    b.HasIndex("PostetbypersonId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebApplication1.Models.Friendwith", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FriendAversary")
                        .HasColumnType("datetime2");

                    b.Property<int>("SecondPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecondPersonId");

                    b.ToTable("Friendwiths");
                });

            modelBuilder.Entity("WebApplication1.Models.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime_of_Msg")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Msg_text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstPersonId");

                    b.HasIndex("SecondPersonId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApplication1.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("WebApplication1.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("WebApplication1.Models.PostImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostiddId")
                        .HasColumnType("int");

                    b.Property<bool>("isPrimary")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PostiddId");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("WebApplication1.Models.Reaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentIdid")
                        .HasColumnType("int");

                    b.Property<int?>("ImageIdId")
                        .HasColumnType("int");

                    b.Property<int?>("PostIdsId")
                        .HasColumnType("int");

                    b.Property<int?>("PostVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Reactiontypeeid")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CommentIdid");

                    b.HasIndex("ImageIdId");

                    b.HasIndex("PostIdsId");

                    b.HasIndex("PostVideoId");

                    b.HasIndex("Reactiontypeeid");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("WebApplication1.Models.ReactionType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("id");

                    b.ToTable("ReactionTypes");
                });

            modelBuilder.Entity("Assignment2.Models.PostVideo", b =>
                {
                    b.HasOne("WebApplication1.Models.Post", null)
                        .WithMany("PostVideo")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("WebApplication1.Models.Comments", b =>
                {
                    b.HasOne("WebApplication1.Models.Comments", null)
                        .WithMany("ParentCommentidd")
                        .HasForeignKey("Commentsid");

                    b.HasOne("WebApplication1.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("WebApplication1.Models.Person", "Postetbyperson")
                        .WithMany("Comments")
                        .HasForeignKey("PostetbypersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Friendwith", b =>
                {
                    b.HasOne("WebApplication1.Models.Person", "SecondPerson")
                        .WithMany("FrirstPersonn")
                        .HasForeignKey("SecondPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Messages", b =>
                {
                    b.HasOne("WebApplication1.Models.Person", "FirstPerson")
                        .WithMany()
                        .HasForeignKey("FirstPersonId");

                    b.HasOne("WebApplication1.Models.Person", "SecondPerson")
                        .WithMany()
                        .HasForeignKey("SecondPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Post", b =>
                {
                    b.HasOne("WebApplication1.Models.Person", null)
                        .WithMany("Posts")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("WebApplication1.Models.PostImages", b =>
                {
                    b.HasOne("WebApplication1.Models.Post", "Postidd")
                        .WithMany("PostImages")
                        .HasForeignKey("PostiddId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Reaction", b =>
                {
                    b.HasOne("WebApplication1.Models.Comments", "CommentId")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentIdid");

                    b.HasOne("WebApplication1.Models.PostImages", "ImageId")
                        .WithMany("Reactions")
                        .HasForeignKey("ImageIdId");

                    b.HasOne("WebApplication1.Models.Post", "PostIds")
                        .WithMany()
                        .HasForeignKey("PostIdsId");

                    b.HasOne("Assignment2.Models.PostVideo", null)
                        .WithMany("Reaction")
                        .HasForeignKey("PostVideoId");

                    b.HasOne("WebApplication1.Models.ReactionType", "Reactiontypee")
                        .WithMany("Reactions")
                        .HasForeignKey("Reactiontypeeid");
                });
#pragma warning restore 612, 618
        }
    }
}
