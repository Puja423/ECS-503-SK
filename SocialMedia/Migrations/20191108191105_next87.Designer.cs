// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialMedia.Models;

namespace SocialMedia.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20191108191105_next87")]
    partial class next87
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SocialMedia.Models.ArchivedPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ArchivedDate");

                    b.Property<int?>("PostIdId");

                    b.HasKey("Id");

                    b.HasIndex("PostIdId");

                    b.ToTable("ArchivedPost");
                });

            modelBuilder.Entity("SocialMedia.Models.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePosted");

                    b.Property<int?>("commentId");

                    b.Property<int>("personId");

                    b.Property<int>("postId");

                    b.HasKey("Id");

                    b.HasIndex("commentId");

                    b.HasIndex("personId");

                    b.HasIndex("postId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialMedia.Models.FriendWith", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Friendaversary");

                    b.Property<int>("person1Id");

                    b.HasKey("Id");

                    b.HasIndex("person1Id");

                    b.ToTable("FriendWiths");
                });

            modelBuilder.Entity("SocialMedia.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("SocialMedia.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonnIDId");

                    b.Property<string>("PostContent")
                        .IsRequired();

                    b.Property<DateTime>("PostedDate");

                    b.Property<int>("ShareIDID");

                    b.Property<int?>("TagIDID");

                    b.HasKey("Id");

                    b.HasIndex("PersonnIDId");

                    b.HasIndex("ShareIDID");

                    b.HasIndex("TagIDID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("SocialMedia.Models.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PostIDId");

                    b.Property<string>("filename")
                        .IsRequired();

                    b.Property<bool>("isPrimary");

                    b.HasKey("Id");

                    b.HasIndex("PostIDId");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("SocialMedia.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ReactionDate");

                    b.Property<int?>("commentidId");

                    b.Property<int?>("postidId");

                    b.Property<int?>("postimageId");

                    b.Property<int?>("reactiontypeId");

                    b.HasKey("Id");

                    b.HasIndex("commentidId");

                    b.HasIndex("postidId");

                    b.HasIndex("postimageId");

                    b.HasIndex("reactiontypeId");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("SocialMedia.Models.ReactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconURL");

                    b.Property<string>("TypeName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ReactionTypes");
                });

            modelBuilder.Entity("SocialMedia.Models.Share", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateShared");

                    b.Property<int?>("PersonIDId");

                    b.Property<string>("ShareType")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("PersonIDId");

                    b.ToTable("Share");
                });

            modelBuilder.Entity("SocialMedia.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTaged");

                    b.HasKey("ID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("SocialMedia.Models.ArchivedPost", b =>
                {
                    b.HasOne("SocialMedia.Models.Post", "PostId")
                        .WithMany("ArId")
                        .HasForeignKey("PostIdId");
                });

            modelBuilder.Entity("SocialMedia.Models.Comments", b =>
                {
                    b.HasOne("SocialMedia.Models.Comments", "comment")
                        .WithMany("ParentComment")
                        .HasForeignKey("commentId");

                    b.HasOne("SocialMedia.Models.Person", "person")
                        .WithMany("comments")
                        .HasForeignKey("personId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SocialMedia.Models.Post", "post")
                        .WithMany("Comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SocialMedia.Models.FriendWith", b =>
                {
                    b.HasOne("SocialMedia.Models.Person", "person1")
                        .WithMany("FriendWith1")
                        .HasForeignKey("person1Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SocialMedia.Models.Post", b =>
                {
                    b.HasOne("SocialMedia.Models.Person", "PersonnID")
                        .WithMany("PostiD")
                        .HasForeignKey("PersonnIDId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SocialMedia.Models.Share", "ShareID")
                        .WithMany("PostID")
                        .HasForeignKey("ShareIDID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SocialMedia.Models.Tag", "TagID")
                        .WithMany("PostID")
                        .HasForeignKey("TagIDID");
                });

            modelBuilder.Entity("SocialMedia.Models.PostImage", b =>
                {
                    b.HasOne("SocialMedia.Models.Post", "PostID")
                        .WithMany("PostImages")
                        .HasForeignKey("PostIDId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SocialMedia.Models.Reaction", b =>
                {
                    b.HasOne("SocialMedia.Models.Comments", "commentid")
                        .WithMany("Reaction")
                        .HasForeignKey("commentidId");

                    b.HasOne("SocialMedia.Models.Post", "postid")
                        .WithMany("Reaction")
                        .HasForeignKey("postidId");

                    b.HasOne("SocialMedia.Models.PostImage", "postimage")
                        .WithMany("Reaction")
                        .HasForeignKey("postimageId");

                    b.HasOne("SocialMedia.Models.ReactionType", "reactiontype")
                        .WithMany("Reaction")
                        .HasForeignKey("reactiontypeId");
                });

            modelBuilder.Entity("SocialMedia.Models.Share", b =>
                {
                    b.HasOne("SocialMedia.Models.Person", "PersonID")
                        .WithMany("ShareID")
                        .HasForeignKey("PersonIDId");
                });
#pragma warning restore 612, 618
        }
    }
}
